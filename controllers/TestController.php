<?php

namespace app\controllers;
//namespace app\components;

use yii\web\Controller;
//use yii\base\Component;
use app\components\Customer;
use app\components\Order;
use yii\helpers\Url;

class TestController extends Controller
{
    public $message = 'Message from Test controller';
    public $messageToTranslate = 'Internationalization (I18N) refers to the process of designing a software application so that it can be adapted to various languages and regions without engineering changes. For Web applications, this is of particular importance because the potential users may be worldwide. Yii offers a full spectrum of I18N features that support message translation, view translation, date and number formatting.';
    
    public function actionIndex()
    {
    	$customer = new Customer;
        setSession('eventMessage', null);
 
 	    $customer->on(Customer::EVENT_CUSTOMER_REGISTERED, 'genericEventHandlerFunction','Customer register event data');
        $customer->RegisterCustomer();

        return $this->render('index',array('content'=>$this->message));
    }

    public function actionViewMessage()
    {
        return $this->render('view-message',array('content'=>$this->message));
    }

    public function actionRegisterCustomer()
    {
        //create customer component object
        $customer = new Customer;

        //first clear session, so our event will set message in this session variable
        setSession('eventMessage', null);
 
        //attach event handler, 'genericEventHandlerFunction' is the name of global function with accepting one argument $event
        $customer->on(Customer::EVENT_CUSTOMER_REGISTERED, 'genericEventHandlerFunction','Customer register event data');
        
        //this function will trigger event
        $customer->RegisterCustomer();  

        //this view will display message generated by event
        return $this->render('view-message');
    }

    public function actionRegisterOrder()
    {
        //create order component object
        $order = new Order;

        //first clear session, so our event will set message in this session variable
        setSession('eventMessage', null);
 
        //attach event handler, 'genericEventHandlerFunction' is the name of global function with accepting one argument $event
        $order->on(Order::EVENT_ORDER_REGISTERED, 'genericEventHandlerFunction','Order register event data');
        
        //this function will trigger event
        $order->RegisterOrder();  

        //this view will display message generated by event
        return $this->render('view-message');
    }

    public function actionCustomerBehavior()
    {
        $customer = new Customer;

        //$tempMessage = "test message";
        $tempMessage = $customer->name;
        $tempMessage .= nl2br("\n");
        $tempMessage .= "additionalProperty = " . $customer->additionalProperty;
        
        $tempMessage .= nl2br("\n\n");
        $tempMessage .= "Calling additionalFunction...";
        
        $customer->additionalFunction();
        
        $tempMessage .= nl2br("\n");
        $tempMessage .= "additionalProperty = " . $customer->additionalProperty;

        return $this->render('index',array('content'=>$tempMessage));
    }

   public function actionInternationalization($language="en-US")
    {
         //\Yii::$app->language = 'ar-SA';
         \Yii::$app->language = $language;

        $tempMessage = "Test Message";
        return $this->render('internationalization',array('content'=>$tempMessage));
    }
}

            // function ($event) {
            //     // event handling logic
            //     //$tUrl = Url::toRoute('test/index2', true);
            //     //\Yii::$app->response->redirect($tUrl)->send();
            //     setSession('t1','test');
            // }
        //);
